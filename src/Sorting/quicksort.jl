# Check for sortedness, assuming no NaNs
@inline function issortedrange(A, i‚Çó, i·µ§)
    @inbounds for i = i‚Çó+1:i·µ§
        if A[i-1] > A[i]
            return false
        end
    end
    return true
end

# Check for anti-sortedness, assuming no NaNs
@inline function isantisortedrange(A, i‚Çó, i·µ§)
    @inbounds for i = i‚Çó+1:i·µ§
        if A[i-1] < A[i]
            return false
        end
    end
    return true
end

# Reverse an array, faster than Base.reverse!
@inline function vreverse!(A, i‚Çó, i·µ§)
    N = (i·µ§ - i‚Çó) + 1
    n = (N √∑ 2) - 1
    if N < 32
        @inbounds for i ‚àà 0:n
            ùî¶‚Çó, ùî¶·µ§ = i‚Çó+i, i·µ§-i
            A[ùî¶‚Çó], A[ùî¶·µ§] = A[ùî¶·µ§], A[ùî¶‚Çó]
        end
    else
        @inbounds @simd ivdep for i ‚àà 0:n
            ùî¶‚Çó = i‚Çó+i
            ùî¶·µ§ = i·µ§-i
            l = A[ùî¶‚Çó]
            u = A[ùî¶·µ§]
            A[ùî¶‚Çó] = u
            A[ùî¶·µ§] = l
        end
    end
    return A
end

# Move all NaNs to the end of the array A
function sortnans!(A::AbstractArray, i‚Çó::Int=firstindex(A), i·µ§::Int=lastindex(A))
    # Return early if range is empty
    i‚Çó >= i·µ§ && return A, i‚Çó, i·µ§

    # Count up NaNs
    N‚Çô‚Çê‚Çô = 0
    @inbounds @simd ivdep for i = i‚Çó:i·µ§
        N‚Çô‚Çê‚Çô += isnan(A[i])
    end
    # If none, return early
    N‚Çô‚Çê‚Çô == 0 && return A, i‚Çó, i·µ§

    # Otherwise, swap all NaNs
    i = i‚Çó
    j = i·µ§
    N = i·µ§ - i‚Çó
    @inbounds for n = 0:N-N‚Çô‚Çê‚Çô
        i = i‚Çó + n
        if A[i] != A[i]
            while A[j] != A[j]
                j -= 1
            end
            j <= i && break
            A[i], A[j] = A[j], A[i]
            j -= 1
        end
    end
    return A, i‚Çó, i·µ§ - N‚Çô‚Çê‚Çô
end
function argsortnans!(I::AbstractArray, A::AbstractArray, i‚Çó::Int=firstindex(A), i·µ§::Int=lastindex(A))
    # Return early if range is empty
    i‚Çó >= i·µ§ && return I, A, i‚Çó, i·µ§
    
    # Count up NaNs
    N‚Çô‚Çê‚Çô = 0
    @inbounds @simd ivdep for i = i‚Çó:i·µ§
        N‚Çô‚Çê‚Çô += isnan(A[i])
    end
    # If none, return early
    N‚Çô‚Çê‚Çô == 0 && return I, A, i‚Çó, i·µ§

    # Otherwise, swap all NaNs
    i = i‚Çó
    j = i·µ§
    N = i·µ§ - i‚Çó
    @inbounds for n = 0:N-N‚Çô‚Çê‚Çô
        i = i‚Çó + n
        if A[i] != A[i]
            while A[j] != A[j]
                j -= 1
            end
            j <= i && break
            A[i], A[j] = A[j], A[i]
            I[i], I[j] = I[j], I[i]
            j -= 1
        end
    end
    return I, A, i‚Çó, i·µ§ - N‚Çô‚Çê‚Çô
end
# For integers, don't need to check for NaNs
sortnans!(A::AbstractArray{<:Integer}, i‚Çó::Int=firstindex(A), i·µ§::Int=lastindex(A)) = A, i‚Çó, i·µ§
argsortnans!(I::AbstractArray, A::AbstractArray{<:Integer}, i‚Çó::Int=firstindex(A), i·µ§::Int=lastindex(A)) = I, A, i‚Çó, i·µ§

# Partially sort `A` around the `k`th sorted element and return that element
@inline function quickselect!(A::AbstractArray, i‚Çó=firstindex(A), i·µ§=lastindex(A), k=(i‚Çó+i·µ§)√∑2)
    Base.Sort.partialsort!(view(A, i‚Çó:i·µ§), k-(i‚Çó-1))
end

# Sort `A`, assuming no NaNs
function quicksort!(A::TA, i‚Çó=firstindex(A), i·µ§=lastindex(A)) where {TA<:AbstractArray}
    # If already sorted, we're done here
    issortedrange(A, i‚Çó, i·µ§) && return A::TA

    # Otherwise, we have to sort
    N = i·µ§ - i‚Çó + 1
    if isantisortedrange(A, i‚Çó, i·µ§)
        vreverse!(A, i‚Çó, i·µ§)
    elseif N == 3
        # We know we are neither sorted nor antisorted, so only four possibilities remain
        i‚Çò = i‚Çó + 1
        a,b,c = A[i‚Çó], A[i‚Çò], A[i·µ§]
        if a <= b
            if a <= c
                A[i‚Çò], A[i·µ§] = c, b             # a ‚â§ c ‚â§ b
            else
                A[i‚Çó], A[i‚Çò], A[i·µ§] = c, a, b   # c ‚â§ a ‚â§ b
            end
        else
            if a <= c
                A[i‚Çó], A[i‚Çò] = b, a             # b ‚â§ a ‚â§ c
            else
                A[i‚Çó], A[i‚Çò], A[i·µ§] = b, c, a   # b ‚â§ c ‚â§ a
            end
        end
    else
        # Pick a pivot for partitioning
        i‚Çö = i‚Çó + (N >> 2)
        A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
        pivot = A[i‚Çó]

        # Count up elements that must be moved to upper partition
        N·µ§ = 0
        @inbounds @simd ivdep for i = (i‚Çó+1):i·µ§
            N·µ§ += A[i] >= pivot
        end
        N‚Çó = N - N·µ§

        # Swap elements between upper and lower partitions
        i = i‚Çó
        j = i·µ§
        @inbounds for n = 1:N‚Çó-1
            i = i‚Çó + n
            if A[i] >= pivot
                while A[j] >= pivot
                    j -= 1
                end
                j <= i && break
                A[i], A[j] = A[j], A[i]
                j -= 1
            end
        end
        # Move pivot to the top of the lower partition
        i‚Çö = i‚Çó + N‚Çó - 1
        A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
        # Recurse: sort both upper and lower partitions
        quicksort!(A, i‚Çó, i‚Çö)::TA
        quicksort!(A, i‚Çö+1, i·µ§)::TA
    end
    return A::TA
end

# Argsort: sort A and permute I to match `A`, assuming no NaNs
function argsort!(I::TI, A::TA, i‚Çó::Int=firstindex(A), i·µ§::Int=lastindex(A)) where {TI<:AbstractArray, TA<:AbstractArray}
    # If already sorted, we're done here
    issortedrange(A, i‚Çó, i·µ§) && return (I, A)::Tuple{TI, TA}
        
    # Otherwise, we have to sort
    N = i·µ§ - i‚Çó + 1
    if isantisortedrange(A, i‚Çó, i·µ§)
        vreverse!(A, i‚Çó, i·µ§)
        vreverse!(I, i‚Çó, i·µ§)
    elseif N == 3
        # We know we are neither sorted nor antisorted, so only four possibilities remain
        i‚Çò = i‚Çó + 1
        a,b,c = A[i‚Çó], A[i‚Çò], A[i·µ§]
        if a <= b
            if a <= c
                A[i‚Çò], A[i·µ§] = c, b             # a ‚â§ c ‚â§ b
                I[i‚Çò], I[i·µ§] = I[i·µ§], I[i‚Çò]
            else
                A[i‚Çó], A[i‚Çò], A[i·µ§] = c, a, b   # c ‚â§ a ‚â§ b
                I[i‚Çó], I[i‚Çò], I[i·µ§] = I[i·µ§], I[i‚Çó], I[i‚Çò]
            end
        else
            if a <= c
                A[i‚Çó], A[i‚Çò] = b, a             # b ‚â§ a ‚â§ c
                I[i‚Çó], I[i‚Çò] = I[i‚Çò], I[i‚Çó]
            else
                A[i‚Çó], A[i‚Çò], A[i·µ§] = b, c, a   # b ‚â§ c ‚â§ a
                I[i‚Çó], I[i‚Çò], I[i·µ§] = I[i‚Çò], I[i·µ§], I[i‚Çó]
            end
        end
    else
        # Pick a pivot for partitioning
        i‚Çö = i‚Çó + (N >> 2)
        A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
        I[i‚Çó], I[i‚Çö] = I[i‚Çö], I[i‚Çó]
        pivot = A[i‚Çó]

        # Count up elements that must be moved to upper partition
        N·µ§ = 0
        @inbounds @simd ivdep for i = (i‚Çó+1):i·µ§
            N·µ§ += A[i] >= pivot
        end
        N‚Çó = N - N·µ§

        # Swap elements between upper and lower partitions
        i = i‚Çó
        j = i·µ§
        @inbounds for n = 1:N‚Çó-1
            i = i‚Çó + n
            if A[i] >= pivot
                while A[j] >= pivot
                    j -= 1
                end
                j <= i && break
                A[i], A[j] = A[j], A[i]
                I[i], I[j] = I[j], I[i]
                j -= 1
            end
        end
        # Move pivot to the top of the lower partition
        i‚Çö = i‚Çó + N‚Çó - 1
        A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
        I[i‚Çó], I[i‚Çö] = I[i‚Çö], I[i‚Çó]
        # Recurse: sort both upper and lower partitions
        argsort!(I, A, i‚Çó, i‚Çö)::Tuple{TI, TA}
        argsort!(I, A, i‚Çö+1, i·µ§)::Tuple{TI, TA}
    end
    return (I, A)::Tuple{TI, TA}
end

@inline function nansort!(A)
    A, i‚Çó, i·µ§ = sortnans!(A)
    quicksort!(A, i‚Çó, i·µ§)
    return A
end
export nansort!
@inline function nanargsort!(I, A)
    I, A, i‚Çó, i·µ§ = argsortnans!(I, A)
    argsort!(I, A, i‚Çó, i·µ§)
    return I, A
end
export nanargsort!